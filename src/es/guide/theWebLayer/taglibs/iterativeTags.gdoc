{hidden}
Iterative tags are easy too, since you can invoke the body multiple times:
{hidden}

Las etiquetas iterativas son tambien sencillas, pues puedes invocar el cuerpo multiples veces:

{code:java}
def repeat = { attrs, body ->
    attrs.times?.toInteger()?.times { num ->
        out << body(num)
    }
}
{code}

{hidden}
In this example we check for a @times@ attribute and if it exists convert it to a number, then use Groovy's @times@ method to iterate the specified number of times:
{hidden}

En este ejemplo podemos buscar el atributo @times@ y si existe convertirlo en un numero, entonces usar el metodo @times@ de Groovy para iterar en un numero especifico de veces:

{code:xml}
<g:repeat times="3">
<p>Repeat this 3 times! Current repeat = ${it}</p>
</g:repeat>
{code}

{hidden}
Notice how in this example we use the implicit @it@ variable to refer to the current number. This works because when we invoked the body we passed in the current value inside the iteration:
{hidden}

Note como en este ejemplo usamos la variable implicita @it@ para referirnos al numero actual. Esto funciona porque cuando invocamos el cuerpo le pasamos el valor actual dentro de la iteracion:

{code:java}
    out << body(num)
{code}

{hidden}
That value is then passed as the default variable @it@ to the tag. However, if you have nested tags this can lead to conflicts, so you should should instead name the variables that the body uses:
{hidden}

Ese valor es pasado entonces como la variable @it@ por defecto hacia la etiqueta. Sin embargo, si has anidado etiquetas esto puede ocasionar conflictos, asi que en ves deberia de nombrar las variables que el cuerpo usa:

{code:java}
def repeat = { attrs, body ->
    def var = attrs.var ?: "num"
    attrs.times?.toInteger()?.times { num ->
        out << body((var):num)
    }
}
{code}

{hidden}
Here we check if there is a @var@ attribute and if there is use that as the name to pass into the body invocation on this line:
{hidden}

Aqui checamos si hay un atributo @var@ y si lo hay lo usamos como el nombre para pasarlo dentro de la invocacion del cuerpo en esta linea:

{code:java}
    out << body((var):num)
{code}

{hidden}
{note}
Note the usage of the parenthesis around the variable name. If you omit these Groovy assumes you are using a String key and not referring to the variable itself.
{note}
{hidden}

{note}
Note el uso del parentesis alrededor del nombre de la variable. Si usted omite esto Grovvy asume que esta usando una llave String y no se esta refiriendo a la variable.
{note}

{hidden}
Now we can change the usage of the tag as follows:
{hidden}

Ahora podemos cambiar el uso de la etiqueta como sigue:

{code:xml}
<g:repeat times="3" var="j">
<p>Repeat this 3 times! Current repeat = ${j}</p>
</g:repeat>
{code}

{hidden}
Notice how we use the @var@ attribute to define the name of the variable @j@ and then we are able to reference that variable within the body of the tag.
{hidden}
Note como usamos el atributo @var@ para definir el nombre de la variable @j@ y entonces somos capaces de referenciar la variable dentro del cuerpo de la etiqueta.